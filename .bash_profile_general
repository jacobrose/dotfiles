# General setup not pertaining to any particular project, to be
# sourced from .bash_profile 
# Sometimes screen(1) doesn't time out fast enough for my liking.
# This forces all attached screens to detach immediately so I can
# use `screen -RR` to load each one in turn.
alias freescreen='for screen in `screen -ls | grep "Attached" | cut -f1 -d. | cut -f2`; do screen -d $screen; done'


# Conveniences
alias mcflush="echo flush_all | nc localhost 11211"
alias ls="ls -F " # it's like -G but for colorblind people
alias logme="tail -F $LOGFILES | grep WHOA | sed -e 's/\\\\n/\\n/g' -e 's/\\\"/\"/g'"
alias python3lint="python3 -m pylint "

# Generalized log tail with grep that formats single-line
# JSON ugliness into multi-line JSON prettiness
loggrep() {
    tail -F $LOGFILES | stdbuf -o0 grep -e "$*" | sed -u -e 's/\\n/\n/g' -e 's/\\"/"/g'
}

# Jump to top of current repo
cdt() { cd `git rev-parse --show-toplevel`; }

# Private JSON pretty-print (requires https://stedolan.github.io/jq)
jsonpretty() {
    {
        if [ -n "$1" ] ; then
            # use parameter as JSON source if provided
            echo "$1"
        else
            # pass whatever was on stdin on through
            cat -
        fi
    } | jq --monochrome-output --sort-keys --indent 4 .
}

# Shell prompt setup
#
# I want to see a few things at a glance:
# * Time
# * My username
# * Which computer this is
# * My current working directory, plus a hint as to what's above it
# * If I'm in a git directory, which branch I'm on and whether there's
#   anything funky going on with it (detached, rebasing, merging, conflicts)
#
# ...and I don't want to lose any room to type commands, so this is a
# two-line prompt that looks something like:
#
#     16:56:50 jacobrose@work-laptop:/U/j/dotfiles master
#
git_status() {
    local normal_status=$(git status 2>>/dev/null)
    local porcelain_status=$(git status --porcelain 2>>/dev/null)

    local highlight_yellow="\033[1;33m"
    local highlight_white="\033[1;37m"
    local highlight_off="\033[0m"

    local branch_status=$(git branch 2>>/dev/null | grep '^\*' | cut -f2- -d' ')
    local off_branch=$(grep '^(' <<< "$branch_status")

    local in_merge=$(grep 'abort the merge' <<< "$normal_status")
    local in_cherry_pick=$(grep 'currently cherry-picking' <<< "$normal_status")
    local in_conflict=$(grep 'fix conflicts' <<< "$normal_status")
    local is_detached=$(grep detached <<< "$branch_status")
    local is_rebasing=$(grep rebasing <<< "$branch_status")

    if [ -n "$off_branch" -o -n "$in_merge" -o -n "$in_cherry_pick" ] ; then
        # Uh oh! We're not on a branch, or we're in the middle of a merge or cherry-pick:
        # highlight (and shorthand) our status!
        local conflict_status=""
        local new_status
        if [ -n "$is_detached" ] ; then
            new_status="detached"
        elif [ -n "$is_rebasing" ] ; then
            new_status="rebasing"
        elif [ -n "$in_merge" ] ; then
            new_status="merging"
        elif [ -n "$in_cherry_pick" ] ; then
            new_status="cherry-pick"
        else
            new_status=$branch_status
        fi

        if [ -n "$in_conflict" ] ; then
            conflict_status=" >conflict<"
        fi

        branch_status="$highlight_yellow$new_status$conflict_status$highlight_off"
    fi

    # Any modification at all? Show a star to say so.
    local modified_status=''
    if [ -n "$porcelain_status" ] ; then
        modified_status="$modified_status$highlight_white*$highlight_off"
    fi

    if [ -n "$branch_status" ] ; then
        echo -ne "$branch_status"
    fi

    if [ -n "$modified_status" ] ; then
        echo -ne "$modified_status"
    fi
}

# Use the first unique bit of the hostname to the prompt -- jrose@jrose isn't useful, but jrose@vm is
uniquehost() {
    hostname="`hostname -s`"
    if [ "$hostname" == "$USER" ] ; then
        full_hostname="`hostname`"
        hostname=$(echo $full_hostname | sed -e "s|$USER\.\([^\.]*\)\..*|\1|")
    fi
    echo $hostname
}
export UNIQUEHOST="$(uniquehost)"

PROMPT_COMMAND='pwd2=$(sed "s:\([^/]\)[^/]*/:\1/:g" <<<$PWD); ' # from https://unix.stackexchange.com/questions/26844/abbreviated-current-directory-in-shell-prompt
export PS1='\e[1m\t \u@$UNIQUEHOST:$pwd2\e[0m $(git_status)\n\$ '

delete_all_but() {
    if ["${BASH_VERSION%%.*}" -lt 4]; then
        echo "Requires associative arrays, not available until BASH 4. Aborting."
        return
    fi

    # List planned exceptions and build associative array for later use
    echo "You are about to delete every file in the current working directory except for those in this list:"
    echo "EXCEPTIONS ARE $*"
    local -A exceptions
    for exception in $*; do
        exceptions[$exception]=1
        echo "    * $exception"
    done

    # List a few of the files that will be deleted
    echo
    echo "Here are a few of the files we will delete:"
    show=5 # count down from this maximum number of files to list
    more=0 # count up the rest of the files not listed
    for file in *; do
        if [ "$show" = "0" ]; then
            more=$(($more + 1))
        else
            if [ "${exceptions[$file]}" != "1" ]; then
                echo "    * $file"
                show=$(($show - 1))
            fi
        fi
    done
    if [ "$more" != "0" ]; then
        echo "    ...and $more more."
    fi

    # Prompt for approval
    echo
    echo -n "Are you sure? (type 'yes' to proceed) "
    read answer
    if [ "$answer" != 'yes' ]; then
        echo "Aborting."
        return
    fi

    # Okay to proceed. Delete away!
    for file in *; do
        if [ "${exceptions[$file]}" = "1" ]; then
            echo "Skipping '$file'..."
        else
            echo "Deleting '$file'..."
            rm -rf $file
        fi
    done
}

# Handy alias for dealing with long lines; usually for use with
# git grep, which often returns long compiled stuff that we don't
# care to see.
shorts() {
    LENGTH=135

    if [ "$1" = "-t" ]; then
        # Truncate lines rather than eliminating them
        cut -c1-$LENGTH
    else
        # Filter long lines out
        awk '/^.{1,'$LENGTH'}$/ { print }'
    fi
}

# Takes -e script to run on first parameter, and input on second paramter (or falls back to stdin)
dosed() {
    if (( "$#" == 1 )); then
        sed -e $1 -
    else
        expression=$1
        shift
        echo $@ | sed -e $expression -
    fi
}

# convert paths/like/this to paths_like_this
s2u() {
    dosed 's|/|_|g' $@
}

# convert paths_like_this to paths/like/this
u2s() {
    dosed 's|_|/|g' $@
}

# Find string x inside a PHP function named f
findxinf() {
    find . -type f -name "*.php" -exec perl -n -e 'if (/function ([a-zA-Z0-9_]*)/) { $method = $1; } if (/'$1'/ && ( $method =~ /'$2'/)) { print $ARGV, "\n"; }' {}  \;
}

# Getting into GCloud
function gcloud_auth() {
    gcloud auth login --no-launch-browser
    gcloud auth application-default login --no-launch-browser
}

# Lint your python code before you ship it
pylint() {
    for file in `git diff origin/master --name-only | grep '\\.py$'`; do
        flake8 $file
    done
}

# Taming Docker for Mac
#
# Set hyperkit priority to 10 so it doesn't eat the CPU
#
alias dockerpri='echo -n "docker priority currently: "; ps alx | grep .app/Contents/MacOS/com.docker.hyperkit | grep -v grep | sed "s: *[0-9]*  *[0-9]*  *[0-9]*  *[0-9]*  *[0-9]*  *\([0-9]*\) .*:\1:"'
alias dockernice='sudo renice 10 $(ps ax | grep .app/Contents/MacOS/com.docker.hyperkit | grep -v grep | sed "s: *\([0-9]*\) .*:\1:"); echo -n "dockerpri: "; dockerpri'

# Reset character set when `reset`, `clear`, and even `stty sane; tput rs1` don't work
# From https://unix.stackexchange.com/a/261688
alias resetcharset='echo -e "\033c"'

export HISTTIMEFORMAT='%Y-%m-%d %H:%I:%S %z '
